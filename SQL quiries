-- Create the Users Table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    loyalty_points INT DEFAULT 0
);

-- Create the Pizzas Table (includes user and predefined pizzas)
CREATE TABLE pizzas (
    pizza_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    crust VARCHAR(50) NOT NULL,
    sauce VARCHAR(50) NOT NULL,
    cheese VARCHAR(50) NOT NULL,
    toppings TEXT NOT NULL, -- Store toppings as a comma-separated string
    price DECIMAL(10, 2) NOT NULL,
    rating DECIMAL(3, 2) DEFAULT 0, -- Average rating for the pizza
    pizza_type ENUM('user', 'predefined') NOT NULL DEFAULT 'user'
);

-- Create a Junction Table for User Favorites
CREATE TABLE user_favorite_pizzas (
    user_id INT NOT NULL,
    pizza_id INT NOT NULL,
    PRIMARY KEY (user_id, pizza_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (pizza_id) REFERENCES pizzas(pizza_id) ON DELETE CASCADE
);

-- Create the Orders Table
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_price DECIMAL(10, 2) NOT NULL,
    rating DECIMAL(3, 2) DEFAULT NULL, -- Rating for the order
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create a Junction Table for Order Details (to handle multiple pizzas in an order)
CREATE TABLE order_details (
    order_detail_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    pizza_id INT NOT NULL,
    quantity INT DEFAULT 1,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (pizza_id) REFERENCES pizzas(pizza_id) ON DELETE CASCADE
);


